type Query {
  categories: [Category!]!
  cart: Cart
  user(id: ID): User
  search(
    searchString: String!
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductConnection
  filter(
    searchString: String
    orderBy: String
    gender: String
    productType: String
    size: String
    price: String
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductConnection
  similarProducts(categoryId: String!): [Product!]!
  products(
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): ProductConnection
  product(id: ID!): Product
  promoCodes: [DiscountCode!]!
  discountCode(code: String!): DiscountCode
  savedItems: SavedItemConnection
  orders: [Order!]!
  sizes: [Size!]!
}

type Mutation {
  login(email: String!, password: String!): AuthPayload
  signup(
    firstName: String!
    lastName: String!
    email: String!
    password: String!
  ): AuthPayload
  addToCart(productId: ID!, sizeId: ID!, quantity: Int!): CartItem
  removeItemFromCart(cartItemId: ID!): SuccessPayload
  createOrder: Order
  cancelOrder(id: ID!): Order
  updateUser(firstName: String, lastName: String): User
  deactivateUser(id: ID!): User
  createAddress(
    firstName: String
    lastName: String
    address: String!
    type: AddressType!
    country: String!
    phoneNumber: String
    state: String!
    city: String!
    zipcode: String!
  ): Address
  updateAddress(
    id: ID!
    firstName: String
    lastName: String
    address: String
    type: AddressType
    country: String
    phoneNumber: String
    state: String
    city: String
    zipcode: String
  ): Address
  deleteAddress(id: ID!): Address
  saveItem(productId: ID!): SavedItem
  deleteSavedItem(id: ID!): SavedItem
  createReview(productId: ID!, comment: String!, rating: Int): Review
}

enum AddressType {
  CUSTOMER
  STAFF
  SHIPPING
  BILLNG
}

enum DiscountCodeType {
  GIFT_CARD
  PROMO_CODE
  REFUND
  GIVEAWAY
}

enum Gender {
  MALE
  FEMALE
}

enum OrderStatus {
  RECIEVED
  PROCESSING
  ACCEPTED
  IN_TRANSIT
  DELIVERED
}

enum UserType {
  CUSTOMER
  STAFF
}

type AuthPayload {
  token: String
  user: User
}

type SuccessPayload {
  success: Boolean!
}

type Address {
  id: ID!
  firstName: String
  lastName: String
  address: String!
  type: AddressType!
  country: String!
  phoneNumber: String
  state: String!
  city: String!
  zipcode: String!
  owner: User!
}

type Cart {
  id: ID!
  owner: User
  items: [CartItem!]!
  shippingFee: Float
  subtotal: Float
  total: Float
}

type CartItem {
  id: ID!
  cart: Cart!
  product: Product!
  size: Size!
  quantity: Int!
  total: Float!
}

type Category {
  id: ID!
  name: String!
  image: Image
}

type DiscountCode {
  id: ID!
  amount: Float
  percentage: Float
  code: String!
  active: Boolean!
  message: String
  expiresAt: String!
  type: DiscountCodeType!
}

type Image {
  id: ID!
  url: String!
}

type Order {
  id: ID!
  owner: User!
  items: [OrderItem!]!
  status: OrderStatus!
  cancelled: Boolean!
  shippingFee: Float!
  subtotal: Float!
  total: Float!
}

type OrderItem {
  id: ID!
  order: Order!
  product: Product!
  size: Size!
  price: Float!
  quantity: Int!
  total: Float!
}

type Product {
  id: ID!
  name: String!
  sku: String!
  price: Float!
  discountedPrice: Float
  brand: Brand
  gender: Gender
  category: Category
  sizes: [Size!]!
  images(first: Int): [Image!]!
  description: String
  reviews(first: Int): [Review!]!
  shippingFee: Float
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

type ProductEdge {
  node: Product!
  cursor: String!
}

type AggregateProduct {
  count: Int!
}

type Review {
  id: ID!
  owner: User!
  product: Product!
  comment: String!
  rating: Int
}

type SavedItem {
  id: ID!
  owner: User!
  product: Product!
}

type SavedItemConnection {
  pageInfo: PageInfo!
  edges: [SavedItemEdge]!
  aggregate: AggregateSavedItem!
}

type SavedItemEdge {
  node: SavedItem!
  cursor: String!
}

type AggregateSavedItem {
  count: Int!
}

type Size {
  id: ID
  size: String!
}

type Brand {
  id: ID
  name: String!
}

type User {
  id: ID
  firstName: String
  lastName: String
  email: String
  activated: Boolean
  country: String
  disabled: Boolean
  twoFactorEnabled: Boolean
  pushNotificationEnabled: Boolean
  type: UserType
  sn: String!
  cart: Cart
  orders: [Order!]!
  savedItems: [SavedItem!]!
  addresses: [Address!]!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}
